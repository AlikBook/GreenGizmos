[1mdiff --git a/BackEnd/database.sql b/BackEnd/database.sql[m
[1mindex 1ca4db6..312d277 100644[m
[1m--- a/BackEnd/database.sql[m
[1m+++ b/BackEnd/database.sql[m
[36m@@ -29,16 +29,6 @@[m [mCREATE TABLE users ([m
   role ENUM('admin', 'user', 'guest') DEFAULT 'guest'[m
 );[m
 [m
[31m-CREATE TABLE Cart ([m
[31m-   cart_id INT PRIMARY KEY AUTO_INCREMENT,[m
[31m-   user_id INT,[m
[31m-   product_id INT,[m
[31m-   quantity INT,[m
[31m-   added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,[m
[31m-   status ENUM('active', 'completed', 'cancelled') DEFAULT 'active',[m
[31m-   FOREIGN KEY(user_id) REFERENCES users(user_id),[m
[31m-   FOREIGN KEY(product_id) REFERENCES Products(product_id)[m
[31m-);[m
 [m
 INSERT INTO Categories (category_name)[m
 VALUES [m
[1mdiff --git a/BackEnd/index.js b/BackEnd/index.js[m
[1mindex bc0264b..06dd35f 100644[m
[1m--- a/BackEnd/index.js[m
[1m+++ b/BackEnd/index.js[m
[36m@@ -10,7 +10,7 @@[m [mconst PORT = 3000;[m
 require("dotenv").config();[m
 app.use(cors());[m
 [m
[31m-app.use(express.json());[m
[32m+[m[32mapp.use(express.json());[m[41m [m
 [m
 const connection = mysql.createConnection({[m
   host: process.env.DB_HOST,[m
[36m@@ -46,7 +46,7 @@[m [mapp.get("/products", (req, res) => {[m
 });[m
 [m
 app.get("/products_by_category", async (req, res) => {[m
[31m-  const category = req.query.category;[m
[32m+[m[32m  const category = req.query.category;[m[41m [m
   try {[m
     const [rows] = await connection.promise().execute([m
       `[m
[36m@@ -58,7 +58,7 @@[m [mapp.get("/products_by_category", async (req, res) => {[m
       `,[m
       [category][m
     );[m
[31m-    res.json(rows);[m
[32m+[m[32m    res.json(rows);[m[41m [m
   } catch (error) {[m
     console.error("Error fetching products by category:", error);[m
     res.status(500).send("Error fetching products by category");[m
[36m@@ -66,7 +66,7 @@[m [mapp.get("/products_by_category", async (req, res) => {[m
 });[m
 [m
 app.get("/search_products", async (req, res) => {[m
[31m-  const searchTerm = req.query.q;[m
[32m+[m[32m  const searchTerm = req.query.q;[m[41m [m
   try {[m
     const [rows] = await connection.promise().execute([m
       `[m
[36m@@ -74,7 +74,7 @@[m [mapp.get("/search_products", async (req, res) => {[m
       FROM Products[m
       WHERE product_name LIKE ? OR product_description LIKE ?[m
       `,[m
[31m-      [`%${searchTerm}%`, `%${searchTerm}%`][m
[32m+[m[32m      [`%${searchTerm}%`, `%${searchTerm}%`][m[41m [m
     );[m
     res.json(rows);[m
   } catch (error) {[m
[36m@@ -85,9 +85,7 @@[m [mapp.get("/search_products", async (req, res) => {[m
 [m
 app.get("/categories", async (req, res) => {[m
   try {[m
[31m-    const [rows] = await connection[m
[31m-      .promise()[m
[31m-      .execute("SELECT category_name FROM Categories");[m
[32m+[m[32m    const [rows] = await connection.promise().execute("SELECT category_name FROM Categories");[m
     res.json(rows);[m
   } catch (error) {[m
     console.error("Error fetching categories:", error);[m
[36m@@ -99,6 +97,7 @@[m [mapp.listen(PORT, () => {[m
   console.log(`Backend server started on http://localhost:${PORT}`);[m
 });[m
 [m
[32m+[m
 app.post("/register", async (req, res) => {[m
   const { username, email, password, role = "user" } = req.body;[m
 [m
[36m@@ -125,9 +124,7 @@[m [mapp.post("/register", async (req, res) => {[m
         (err, results) => {[m
           if (err) {[m
             console.error("Registration error:", err);[m
[31m-            return res[m
[31m-              .status(500)[m
[31m-              .json({ message: "User registration failed" });[m
[32m+[m[32m            return res.status(500).json({ message: "User registration failed" });[m
           }[m
           res.status(201).json({ message: "User registered" });[m
         }[m
[36m@@ -136,6 +133,7 @@[m [mapp.post("/register", async (req, res) => {[m
   );[m
 });[m
 [m
[32m+[m
 function verifyToken(req, res, next) {[m
   const authHeader = req.headers.authorization;[m
   if (!authHeader) return res.sendStatus(401);[m
[36m@@ -175,8 +173,7 @@[m [mapp.post("/login", (req, res) => {[m
       const user = results[0];[m
       const match = await bcrypt.compare(password, user.password);[m
 [m
[31m-      if (!match)[m
[31m-        return res.status(401).json({ message: "Invalid credentials" });[m
[32m+[m[32m      if (!match) return res.status(401).json({ message: "Invalid credentials" });[m
 [m
       const token = jwt.sign([m
         { user_id: user.user_id, role: user.role },[m
[36m@@ -189,71 +186,8 @@[m [mapp.post("/login", (req, res) => {[m
   );[m
 });[m
 [m
[31m-// Routes for the Cart[m
[31m-[m
[31m-// Adding a product to the cart[m
[31m-app.post("/cart", verifyToken, (req, res) => {[m
[31m-  const { product_id, quantity } = req.body; // Assuming quantity is sent in the request body[m
[31m-  const user_id = req.user.user_id; // Get the user_id from the token[m
[31m-[m
[31m-  const query = `[m
[31m-    INSERT INTO Cart (user_id, product_id, quantity)[m
[31m-    VALUES (?, ?, ?)[m
[31m-    ON DUPLICATE KEY UPDATE quantity = quantity + ?;[m
[31m-  `;[m
[31m-[m
[31m-  connection.query([m
[31m-    query,[m
[31m-    [user_id, product_id, quantity, quantity],[m
[31m-    (err, results) => {[m
[31m-      if (err) {[m
[31m-        console.error("Error adding product to cart:", err);[m
[31m-        return res.status(500).json({ error: "Server error" });[m
[31m-      }[m
[31m-      res.json({ message: "Product added to cart successfully" });[m
[31m-    }[m
[31m-  );[m
[31m-});[m
[31m-[m
[31m-// Fetching the cart items for a user[m
[31m-app.get("/cart", verifyToken, (req, res) => {[m
[31m-  const user_id = req.user.user_id; // Get the user_id from the token[m
[31m-[m
[31m-  const query = `[m
[31m-    SELECT * FROM Cart c WHERE c.user_id = ?;[m
[31m-  `;[m
[31m-[m
[31m-  connection.query(query, [user_id], (err, results) => {[m
[31m-    if (err) {[m
[31m-      console.error("Error fetching cart items:", err);[m
[31m-      return res.status(500).json({ error: "Server error" });[m
[31m-    }[m
[31m-    res.json(results);[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-// Deleting a product from the cart[m
[31m-app.delete("/cart", verifyToken, (req, res) => {[m
[31m-  const { product_id } = req.body; // Assuming product_id is sent in the request body[m
[31m-  const user_id = req.user.user_id; // Get the user_id from the token[m
[31m-[m
[31m-  const query = `[m
[31m-    DELETE FROM Cart[m
[31m-    WHERE user_id = ? AND product_id = ?;[m
[31m-  `;[m
[31m-[m
[31m-  connection.query(query, [user_id, product_id], (err, results) => {[m
[31m-    if (err) {[m
[31m-      console.error("Error deleting cart item:", err);[m
[31m-      return res.status(500).json({ error: "Server error" });[m
[31m-    }[m
[31m-    res.json({ message: "Cart item removed successfully" });[m
[31m-  });[m
[31m-});[m
[31m-[m
 app.post("/add_product", async (req, res) => {[m
[31m-  const { product_name, product_price, product_description, category_name } =[m
[31m-    req.body;[m
[32m+[m[32m  const { product_name, product_price, product_description, category_name } = req.body;[m
 [m
   try {[m
     const [result] = await connection.promise().execute([m
[36m@@ -264,7 +198,7 @@[m [mapp.post("/add_product", async (req, res) => {[m
       [product_name, product_price, product_description][m
     );[m
 [m
[31m-    const product_id = result.insertId;[m
[32m+[m[32m    const product_id = result.insertId;[m[41m [m
 [m
     await connection.promise().execute([m
       `[m
[36m@@ -282,14 +216,10 @@[m [mapp.post("/add_product", async (req, res) => {[m
 });[m
 [m
 app.get("/users", verifyToken, authorizeRoles("admin"), (req, res) => {[m
[31m-  connection.query([m
[31m-    "SELECT user_id, username, email, role FROM users",[m
[31m-    (err, results) => {[m
[31m-      if (err)[m
[31m-        return res.status(500).json({ message: "Failed to fetch users" });[m
[31m-      res.json(results);[m
[31m-    }[m
[31m-  );[m
[32m+[m[32m  connection.query("SELECT user_id, username, email, role FROM users", (err, results) => {[m
[32m+[m[32m    if (err) return res.status(500).json({ message: "Failed to fetch users" });[m
[32m+[m[32m    res.json(results);[m
[32m+[m[32m  });[m
 });[m
 [m
 app.put("/users/:id", verifyToken, authorizeRoles("admin"), (req, res) => {[m
[36m@@ -300,8 +230,7 @@[m [mapp.put("/users/:id", verifyToken, authorizeRoles("admin"), (req, res) => {[m
     "UPDATE users SET username = ?, email = ?, role = ? WHERE user_id = ?",[m
     [username, email, role, userId],[m
     (err) => {[m
[31m-      if (err)[m
[31m-        return res.status(500).json({ message: "Failed to update user" });[m
[32m+[m[32m      if (err) return res.status(500).json({ message: "Failed to update user" });[m
       res.json({ message: "User updated successfully" });[m
     }[m
   );[m
[36m@@ -316,51 +245,20 @@[m [mapp.delete("/users/:id", verifyToken, authorizeRoles("admin"), (req, res) => {[m
   });[m
 });[m
 [m
[31m-app.delete("/delete_product_by_name", verifyToken, authorizeRoles("admin"), async (req, res) => {[m
[31m-  const { product_name } = req.body;[m
[31m-[m
[31m-  try {[m
[31m-    await connection.promise().execute([m
[31m-      `[m
[31m-      DELETE FROM Belongs_to[m
[31m-      WHERE product_id = (SELECT product_id FROM Products WHERE product_name = ?)[m
[31m-      `,[m
[31m-      [product_name][m
[31m-    );[m
[31m-[m
[31m-    const [result] = await connection.promise().execute([m
[31m-      `[m
[31m-      DELETE FROM Products[m
[31m-      WHERE product_name = ?[m
[31m-      `,[m
[31m-      [product_name][m
[31m-    );[m
[31m-[m
[31m-    if (result.affectedRows === 0) {[m
[31m-      return res.status(404).json({ message: "Product not found" });[m
[31m-    }[m
[31m-[m
[31m-    res.status(200).json({ message: "Product deleted successfully" });[m
[31m-  } catch (error) {[m
[31m-    console.error("Error deleting product:", error);[m
[31m-    res.status(500).json({ message: "Error deleting product" });[m
[31m-  }[m
[31m-});[m
 [m
 const createDefaultAdmin = async () => {[m
   try {[m
[31m-    const [rows] = await connection[m
[31m-      .promise()[m
[31m-      .execute("SELECT * FROM users WHERE username = ?", ["admin"]);[m
[32m+[m[32m    const [rows] = await connection.promise().execute([m
[32m+[m[32m      "SELECT * FROM users WHERE username = ?",[m
[32m+[m[32m      ["admin"][m
[32m+[m[32m    );[m
 [m
     if (rows.length === 0) {[m
       const hashedPassword = await bcrypt.hash("admin123", 10);[m
[31m-      await connection[m
[31m-        .promise()[m
[31m-        .execute([m
[31m-          "INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)",[m
[31m-          ["admin", "admin@example.com", hashedPassword, "admin"][m
[31m-        );[m
[32m+[m[32m      await connection.promise().execute([m
[32m+[m[32m        "INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)",[m
[32m+[m[32m        ["admin", "admin@example.com", hashedPassword, "admin"][m
[32m+[m[32m      );[m
       console.log("Default admin user created.");[m
     } else {[m
       console.log("Admin user already exists.");[m
[36m@@ -368,4 +266,4 @@[m [mconst createDefaultAdmin = async () => {[m
   } catch (error) {[m
     console.error("Error creating default admin:", error);[m
   }[m
[31m-};[m
[32m+[m[32m};[m
\ No newline at end of file[m
[1mdiff --git a/FrontEnd/package-lock.json b/FrontEnd/package-lock.json[m
[1mindex a1d695e..91ea5a4 100644[m
[1m--- a/FrontEnd/package-lock.json[m
[1m+++ b/FrontEnd/package-lock.json[m
[36m@@ -1123,21 +1123,6 @@[m
       "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",[m
       "license": "MIT"[m
     },[m
[31m-    "node_modules/fdir": {[m
[31m-      "version": "6.4.4",[m
[31m-      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",[m
[31m-      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",[m
[31m-      "dev": true,[m
[31m-      "license": "MIT",[m
[31m-      "peerDependencies": {[m
[31m-        "picomatch": "^3 || ^4"[m
[31m-      },[m
[31m-      "peerDependenciesMeta": {[m
[31m-        "picomatch": {[m
[31m-          "optional": true[m
[31m-        }[m
[31m-      }[m
[31m-    },[m
     "node_modules/follow-redirects": {[m
       "version": "1.15.9",[m
       "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",[m
[36m@@ -1354,19 +1339,6 @@[m
       "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",[m
       "license": "ISC"[m
     },[m
[31m-    "node_modules/picomatch": {[m
[31m-      "version": "4.0.2",[m
[31m-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",[m
[31m-      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",[m
[31m-      "dev": true,[m
[31m-      "license": "MIT",[m
[31m-      "engines": {[m
[31m-        "node": ">=12"[m
[31m-      },[m
[31m-      "funding": {[m
[31m-        "url": "https://github.com/sponsors/jonschlinkert"[m
[31m-      }[m
[31m-    },[m
     "node_modules/postcss": {[m
       "version": "8.5.3",[m
       "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",[m
[36m@@ -1450,36 +1422,16 @@[m
         "node": ">=0.10.0"[m
       }[m
     },[m
[31m-    "node_modules/tinyglobby": {[m
[31m-      "version": "0.2.12",[m
[31m-      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.12.tgz",[m
[31m-      "integrity": "sha512-qkf4trmKSIiMTs/E63cxH+ojC2unam7rJ0WrauAzpT3ECNTxGRMlaXxVbfxMUC/w0LaYk6jQ4y/nGR9uBO3tww==",[m
[31m-      "dev": true,[m
[31m-      "license": "MIT",[m
[31m-      "dependencies": {[m
[31m-        "fdir": "^6.4.3",[m
[31m-        "picomatch": "^4.0.2"[m
[31m-      },[m
[31m-      "engines": {[m
[31m-        "node": ">=12.0.0"[m
[31m-      },[m
[31m-      "funding": {[m
[31m-        "url": "https://github.com/sponsors/SuperchupuDev"[m
[31m-      }[m
[31m-    },[m
     "node_modules/vite": {[m
[31m-      "version": "6.3.2",[m
[31m-      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.2.tgz",[m
[31m-      "integrity": "sha512-ZSvGOXKGceizRQIZSz7TGJ0pS3QLlVY/9hwxVh17W3re67je1RKYzFHivZ/t0tubU78Vkyb9WnHPENSBCzbckg==",[m
[32m+[m[32m      "version": "6.2.5",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/vite/-/vite-6.2.5.tgz",[m
[32m+[m[32m      "integrity": "sha512-j023J/hCAa4pRIUH6J9HemwYfjB5llR2Ps0CWeikOtdR8+pAURAk0DoJC5/mm9kd+UgdnIy7d6HE4EAvlYhPhA==",[m
       "dev": true,[m
       "license": "MIT",[m
       "dependencies": {[m
         "esbuild": "^0.25.0",[m
[31m-        "fdir": "^6.4.3",[m
[31m-        "picomatch": "^4.0.2",[m
         "postcss": "^8.5.3",[m
[31m-        "rollup": "^4.34.9",[m
[31m-        "tinyglobby": "^0.2.12"[m
[32m+[m[32m        "rollup": "^4.30.1"[m
       },[m
       "bin": {[m
         "vite": "bin/vite.js"[m
[1mdiff --git a/FrontEnd/src/components/CategoryProducts.vue b/FrontEnd/src/components/CategoryProducts.vue[m
[1mindex ca90f48..8fffad2 100644[m
[1m--- a/FrontEnd/src/components/CategoryProducts.vue[m
[1m+++ b/FrontEnd/src/components/CategoryProducts.vue[m
[36m@@ -1,14 +1,24 @@[m
 <template>[m
   <div class="category-products">[m
[31m-    <h2>Products in {{ categoryName }}</h2>[m
[31m-    <ul v-if="products.length > 0">[m
[31m-      <li v-for="product in products" :key="product.product_id" class="product-item">[m
[31m-        <h3>{{ product.product_name }}</h3>[m
[31m-        <p>{{ product.product_description }}</p>[m
[31m-        <p>Price: ${{ product.product_price }}</p>[m
[31m-      </li>[m
[32m+[m[32m    <h2 class="category-title">{{ categoryName }}</h2>[m
[32m+[m[32m    <ul v-if="products.length > 0" class="products-grid">[m
[32m+[m[32m      <li v-for="product in products" :key="product.product_id" class="product-card">[m
[32m+[m[32m  <img[m
[32m+[m[32m    :src="`https://placehold.co/300x200?text=${encodeURIComponent(product.product_name)}`"[m
[32m+[m[32m    :alt="product.product_name"[m
[32m+[m[32m    class="product-image"[m
[32m+[m[32m  />[m
[32m+[m[32m  <div class="product-content">[m
[32m+[m[32m    <h3 class="product-name">{{ product.product_name }}</h3>[m
[32m+[m[32m    <p class="product-description">{{ product.product_description }}</p>[m
[32m+[m[32m  </div>[m
[32m+[m[32m  <div class="product-footer">[m
[32m+[m[32m    <span class="product-price">${{ product.product_price }}</span>[m
[32m+[m[32m  </div>[m
[32m+[m[32m</li>[m
[32m+[m
     </ul>[m
[31m-    <p v-else>No products found for this category.</p>[m
[32m+[m[32m    <p v-else class="no-products">No products found for this category.</p>[m
   </div>[m
 </template>[m
 [m
[36m@@ -16,21 +26,19 @@[m
 import { ref, watch } from "vue";[m
 import axios from "axios";[m
 [m
[31m-// Recevoir la catégorie en prop[m
 const props = defineProps({[m
   categoryName: {[m
[31m-    type: String, // Type attendu[m
[31m-    required: true, // Rend la prop obligatoire[m
[32m+[m[32m    type: String,[m
[32m+[m[32m    required: true,[m
   },[m
 });[m
 [m
 const products = ref([]);[m
 [m
[31m-// Fonction pour récupérer les produits par catégorie[m
 const fetchProductsByCategory = async () => {[m
   try {[m
     const response = await axios.get([m
[31m-      `http://localhost:3000/products_by_category?category=${props.categoryName}`[m
[32m+[m[32m      `http://localhost:3000/products_by_category?category=${encodeURIComponent(props.categoryName)}`[m
     );[m
     products.value = response.data;[m
   } catch (error) {[m
[36m@@ -38,18 +46,95 @@[m [mconst fetchProductsByCategory = async () => {[m
   }[m
 };[m
 [m
[31m-// Surveiller les changements de la catégorie et mettre à jour les produits[m
 watch(() => props.categoryName, fetchProductsByCategory, { immediate: true });[m
 </script>[m
 [m
 <style scoped>[m
 .category-products {[m
[31m-  margin-top: 20px;[m
[32m+[m[32m  margin: 50px auto;[m
[32m+[m[32m  max-width: 1200px;[m
[32m+[m[32m  padding: 0 25px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.category-title {[m
[32m+[m[32m  font-size: 2.2rem;[m
[32m+[m[32m  font-weight: 700;[m
[32m+[m[32m  color: #1a202c;[m
[32m+[m[32m  margin-bottom: 1.5rem;[m
[32m+[m[32m  border-bottom: 3px solid #e2e8f0;[m
[32m+[m[32m  padding-bottom: 10px;[m
[32m+[m[32m  text-transform: capitalize;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.products-grid {[m
[32m+[m[32m  display: grid;[m
[32m+[m[32m  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));[m
[32m+[m[32m  gap: 24px;[m
[32m+[m[32m  list-style: none;[m
[32m+[m[32m  padding: 0;[m
[32m+[m[32m  margin: 0;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.product-card {[m
[32m+[m[32m  background: #ffffff;[m
[32m+[m[32m  width: 100%;[m
[32m+[m[32m  border: 1px solid #e5e7eb;[m
[32m+[m[32m  border-radius: 16px;[m
[32m+[m[32m  padding: 20px;[m
[32m+[m[32m  display: flex;[m
[32m+[m[32m  flex-direction: column;[m
[32m+[m[32m  justify-content: space-between;[m
[32m+[m[32m  transition: all 0.3s ease-in-out;[m
[32m+[m[32m  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.04);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.product-card:hover {[m
[32m+[m[32m  transform: translateY(-5px);[m
[32m+[m[32m  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.08);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.product-content {[m
[32m+[m[32m  flex-grow: 1;[m
 }[m
[31m-.product-item {[m
[31m-  margin-bottom: 15px;[m
[31m-  padding: 10px;[m
[31m-  border: 1px solid #ddd;[m
[31m-  border-radius: 5px;[m
[32m+[m
[32m+[m[32m.product-name {[